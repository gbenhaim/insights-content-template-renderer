# Copyright 2022 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: v1
kind: Template
metadata:
  name: insights-content-template-renderer
  labels:
    app: insights-content-template-renderer
objects:

- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: insights-content-template-renderer
    labels:
      app: insights-content-template-renderer
    annotations:
      ignore-check.kube-linter.io/minimum-three-replicas: "This app doesn't have that much traffic"
  spec:
    envName: ${ENV_NAME}
    testing:
      iqePlugin: ccx
    deployments:
      - name: service
        replicas: ${{REPLICAS}}
        webServices:
          public:
            enabled: false
          private:
            enabled: true
          metrics:
            enabled: true
        podSpec:
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /openapi.json
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /openapi.json
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "${CPU_LIMIT}"
              memory: 400Mi
            requests:
              cpu: "${CPU_REQUEST}"
              memory: 200Mi
          volumeMounts:
          - name: config
            mountPath: "/insights-content-template-renderer/logging.yml"
            subPath: "logging.yml"
            readOnly: true
          volumes:
          - name: config
            configMap:
              name: logging-config-insights-content-template-renderer
          env:
            # Cloudwatch logging
            - name: LOGGING_TO_CW_ENABLED
              value: ${LOGGING_TO_CW_ENABLED}
            - name: CW_STREAM_NAME
              value: ccx-insights-content-template-renderer
            - name: CW_AWS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: aws_region
                  optional: true
            - name: CW_LOG_GROUP
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: log_group_name
                  optional: true
            - name: CW_AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: aws_access_key_id
                  optional: true
            - name: CW_AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: aws_secret_access_key
                  optional: true

- kind: Service
  apiVersion: v1
  metadata:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "8000"
      prometheus.io/scheme: http
      prometheus.io/scrape: "true"
    name: insights-content-template-renderer-svc
    labels:
      app: insights-content-template-renderer
  spec:
    ports:
      - name: web
        port: 8000
        protocol: TCP
        targetPort: 8000
    selector:
      app: insights-content-template-renderer
    type: ClusterIP

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: logging-config-insights-content-template-renderer
    labels:
      app: insights-content-template-renderer
  data:
    logging.yml: |
      version: 1
      formatters:
        simple:
          format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        default:
          (): uvicorn.logging.DefaultFormatter
          fmt: '%(name)s %(levelprefix)s %(message)s'
          use_colors: None
        access:
          (): uvicorn.logging.AccessFormatter
          fmt: '%(name)s %(levelprefix)s %(client_addr)s - "%(request_line)s" %(status_code)s'
        json:
          class: pythonjsonlogger.jsonlogger.JsonFormatter
      handlers:
        console:
          class: logging.StreamHandler
          level: DEBUG
          formatter: simple
          stream: ext://sys.stdout
        default:
          formatter: default
          class: logging.StreamHandler
          stream: ext://sys.stderr
        access:
          formatter: access
          class: logging.StreamHandler
          stream: ext://sys.stdout
        cloudwatch:
          formatter: json
          class: insights_content_template_renderer.logging_utils.InitializedCloudWatchLogger
      loggers:
        insights_content_template_renderer:
          level: DEBUG
          handlers: [default, cloudwatch]
          propagate: no
        uvicorn:
          handlers: [default, cloudwatch]
          level: INFO
          propagate: no
        uvicorn.error:
          level: INFO
        uvicorn.access:
          handlers: [access, cloudwatch]
          level: INFO
          propagate: no
      root:
        level: DEBUG
        handlers: [default, cloudwatch]

parameters:
- description: Image name
  name: IMAGE
  value: quay.io/redhat-user-workloads/gbenhaim-tenant/insights-content-template-renderer/insights-content-template-renderer
- description: Image tag
  name: IMAGE_TAG
  required: true
- description: Desired number of pods
  name: REPLICAS
  value: '1'
- name: CPU_REQUEST
  value: '100m'
- name: CPU_LIMIT
  value: '250m'
- description: ClowdEnv Name
  name: ENV_NAME
  required: true
- description: Logging level
  name: LOG_LEVEL
  value: DEBUG
- description: Whether to log into CW
  name: LOGGING_TO_CW_ENABLED
  value: 'True'
